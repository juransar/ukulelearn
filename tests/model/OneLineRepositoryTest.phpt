<?php

require_once '../bootstrap.php';

use Tester\Assert;
use Tester\Environment;
use App\Model\ChordRepository;
use App\Model\OneLineRepository;
use App\Model\OnePartRepository;
use App\Model\SongRepository;
use Tester\TestCase;
use Kdyby\Doctrine\EntityManager;
use App\Model\Chord;
use App\Model\OneLine;
use App\Model\OnePart;
use App\Model\Song;
/**
 * Class ChordRepositoryTest
 */
class OneLineRepositoryTest extends TestCase
{
    public $oneLineRepository;
    public $songRepository;
    public $onePartRepository;
    public $chordRepository;

    /** @var Nette\DI\Container */
    private $container;
    public $part;
    public function __construct(Nette\DI\Container $container)
    {
        $this->container = $container;
        Tester\Environment::setup();

    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $entityManager = $this->container->getByType(EntityManager::class);
        $this->oneLineRepository=$this->container->getByType(OneLineRepository::class);//new ChordRepository($entityManager);
        $this->onePartRepository=$this->container->getByType(OnePartRepository::class);//new ChordRepository($entityManager);
        $this->chordRepository=$this->container->getByType(ChordRepository::class);//new ChordRepository($entityManager);
        $this->songRepository = $this->container->getByType(SongRepository::class);//new ChordRepository($entityManager);
        $this->part = new OnePart();

        $this->part->setChord($this->chordRepository->findByName('C'));
        $this->part->setLyric('TestOneLineLyric');
        $this->onePartRepository->save($this->part);
        $res = $this->onePartRepository->findAll();
        foreach ($res as $one) {
            if($one->getLyric()=='TestOneLineLyric') {
                $this->part = $one;
                break;
            }
        }

    }

    public function testSaveOneLine() {
        $line=new OneLine();
        $line->setParts($this->part);
        $this->oneLineRepository->save($line);
        $res=$this->oneLineRepository->findAll();
        $result=null;
        foreach ($res as $one) {
            foreach ($one->getParts() as $part) {
            if($part->getLyric()=='TestOneLineLyric') {
                $result=$one;
                break;
            }
            }
        }
        Assert::notSame(null,$result);
                $this->onePartRepository->delete($this->part);

        $this->oneLineRepository->delete($result);

    }
   public function testUpdateOneLine() {
       $line=new OneLine();
       $line->setParts($this->part);
       $this->oneLineRepository->save($line);
              $this->onePartRepository->delete($this->part);

        $this->part->setChord($this->chordRepository->findByName('G'));
        $line->unsetParts();
        $line->setParts($this->part);
        $this->part->setLine($line);
       $this->onePartRepository->save($this->part);

       $this->oneLineRepository->update($line);
       $res=$this->oneLineRepository->findAll();
       $result=null;
       foreach ($res as $one) {
           foreach ($one->getParts() as $part) {
               if($part->getChord()->getName()=='G' && $part->getLyric()=='TestOneLineLyric') {
                   $result=$one;
                   break;
               }
           }
       }
       Assert::notSame(null,$result);
      $this->onePartRepository->delete($this->part);
      $this->oneLineRepository->delete($result);
    }

}

# SpuÅ¡tÄ›nÃ­ testovacÃ­ch metod
$testCase = new OneLineRepositoryTest($container);
$testCase->run();